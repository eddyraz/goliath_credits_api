(undo-tree-save-format-version . 1)
"a977b0c1774705c95fb00eca642c1dd88709b206"
[nil nil nil nil (25417 28261 620978 274000) 0 nil]
([nil nil ((#("  def index(conn, _params) do
    credits = API.list_credits()
    render(conn, \"index.json\", credits: credits)
  end

  def create(conn, %{\"credits\" => credits_params}) do
    with {:ok, %Credits{} = credits} <- API.create_credits(credits_params) do
      conn
      |> put_status(:created)
      |> put_resp_header(\"location\", Routes.credits_path(conn, :show, credits))
      |> render(\"show.json\", credits: credits)
    end
  end

  def show(conn, %{\"id\" => id}) do
    credits = API.get_credits!(id)
    render(conn, \"show.json\", credits: credits)
  end

  def update(conn, %{\"id\" => id, \"credits\" => credits_params}) do
    credits = API.get_credits!(id)

    with {:ok, %Credits{} = credits} <- API.update_credits(credits, credits_params) do
      render(conn, \"show.json\", credits: credits)
    end
  end

  def delete(conn, %{\"id\" => id}) do
    credits = API.get_credits!(id)

    with {:ok, %Credits{}} <- API.delete_credits(credits) do
      send_resp(conn, :no_content, \"\")
    end
  end" 0 2 (fontified t) 2 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 11 (fontified t face font-lock-function-name-face) 11 18 (fontified t) 18 25 (fontified t face font-lock-comment-face) 25 27 (fontified t) 27 29 (fontified t face font-lock-keyword-face) 29 34 (fontified t) 34 41 (fontified t face font-lock-variable-name-face) 41 44 (fontified t) 44 47 (fontified t face font-lock-type-face) 47 80 (fontified t) 80 81 (fontified t syntax-table (15) face font-lock-string-face) 81 91 (fontified t face font-lock-string-face) 91 92 (fontified t syntax-table (15) face font-lock-string-face) 92 94 (fontified t) 94 102 (fontified t face elixir-atom-face) 102 114 (fontified t) 114 117 (fontified t face font-lock-keyword-face) 117 121 (fontified t) 121 124 (fontified t face font-lock-keyword-face) 124 125 (fontified t) 125 131 (fontified t face font-lock-function-name-face) 131 140 (fontified t) 140 141 (fontified t syntax-table (15) face font-lock-string-face) 141 148 (fontified t face font-lock-string-face) 148 149 (fontified t syntax-table (15) face font-lock-string-face) 149 170 (fontified t) 170 172 (fontified t face font-lock-keyword-face) 172 177 (fontified t) 177 181 (fontified t face font-lock-keyword-face) 181 183 (fontified t) 183 186 (fontified t face elixir-atom-face) 186 188 (fontified t) 188 196 (fontified t face font-lock-type-face) 196 213 (fontified t) 213 216 (fontified t face font-lock-type-face) 216 248 (fontified t) 248 250 (fontified t face font-lock-keyword-face) 250 282 (fontified t) 282 290 (fontified t face elixir-atom-face) 290 294 (fontified t) 294 317 (fontified t) 317 318 (fontified t syntax-table (15) face font-lock-string-face) 318 326 (fontified t face font-lock-string-face) 326 327 (fontified t syntax-table (15) face font-lock-string-face) 327 329 (fontified t) 329 335 (fontified t face font-lock-type-face) 335 355 (fontified t) 355 360 (fontified t face elixir-atom-face) 360 372 (fontified t) 372 388 (fontified t) 388 389 (fontified t syntax-table (15) face font-lock-string-face) 389 398 (fontified t face font-lock-string-face) 398 399 (fontified t syntax-table (15) face font-lock-string-face) 399 401 (fontified t) 401 409 (fontified t face elixir-atom-face) 409 423 (fontified t) 423 426 (fontified t face font-lock-keyword-face) 426 429 (fontified t) 429 432 (fontified t face font-lock-keyword-face) 432 436 (fontified t) 436 439 (fontified t face font-lock-keyword-face) 439 440 (fontified t) 440 444 (fontified t face font-lock-function-name-face) 444 453 (fontified t) 453 454 (fontified t syntax-table (15) face font-lock-string-face) 454 456 (fontified t face font-lock-string-face) 456 457 (fontified t syntax-table (15) face font-lock-string-face) 457 466 (fontified t) 466 468 (fontified t face font-lock-keyword-face) 468 473 (fontified t) 473 480 (fontified t face font-lock-variable-name-face) 480 483 (fontified t) 483 486 (fontified t face font-lock-type-face) 486 521 (fontified t) 521 522 (fontified t syntax-table (15) face font-lock-string-face) 522 531 (fontified t face font-lock-string-face) 531 532 (fontified t syntax-table (15) face font-lock-string-face) 532 534 (fontified t) 534 542 (fontified t face elixir-atom-face) 542 554 (fontified t) 554 557 (fontified t face font-lock-keyword-face) 557 561 (fontified t) 561 564 (fontified t face font-lock-keyword-face) 564 565 (fontified t) 565 571 (fontified t face font-lock-function-name-face) 571 580 (fontified t) 580 581 (fontified t syntax-table (15) face font-lock-string-face) 581 583 (fontified t face font-lock-string-face) 583 584 (fontified t syntax-table (15) face font-lock-string-face) 584 592 (fontified t) 592 593 (fontified t syntax-table (15) face font-lock-string-face) 593 600 (fontified t face font-lock-string-face) 600 601 (fontified t syntax-table (15) face font-lock-string-face) 601 622 (fontified t) 622 624 (fontified t face font-lock-keyword-face) 624 629 (fontified t) 629 636 (fontified t face font-lock-variable-name-face) 636 639 (fontified t) 639 642 (fontified t face font-lock-type-face) 642 665 (fontified t) 665 669 (fontified t face font-lock-keyword-face) 669 671 (fontified t) 671 674 (fontified t face elixir-atom-face) 674 676 (fontified t) 676 684 (fontified t face font-lock-type-face) 684 701 (fontified t) 701 704 (fontified t face font-lock-type-face) 704 745 (fontified t) 745 747 (fontified t face font-lock-keyword-face) 747 767 (fontified t) 767 768 (fontified t syntax-table (15) face font-lock-string-face) 768 777 (fontified t face font-lock-string-face) 777 778 (fontified t syntax-table (15) face font-lock-string-face) 778 780 (fontified t) 780 788 (fontified t face elixir-atom-face) 788 802 (fontified t) 802 805 (fontified t face font-lock-keyword-face) 805 808 (fontified t) 808 811 (fontified t face font-lock-keyword-face) 811 815 (fontified t) 815 818 (fontified t face font-lock-keyword-face) 818 819 (fontified t) 819 825 (fontified t face font-lock-function-name-face) 825 834 (fontified t) 834 835 (fontified t syntax-table (15) face font-lock-string-face) 835 837 (fontified t face font-lock-string-face) 837 838 (fontified t syntax-table (15) face font-lock-string-face) 838 847 (fontified t) 847 849 (fontified t face font-lock-keyword-face) 849 854 (fontified t) 854 861 (fontified t face font-lock-variable-name-face) 861 864 (fontified t) 864 867 (fontified t face font-lock-type-face) 867 872 (fontified t) 872 885 (fontified t) 885 890 (fontified t) 890 894 (fontified t face font-lock-keyword-face) 894 896 (fontified t) 896 899 (fontified t face elixir-atom-face) 899 901 (fontified t) 901 909 (fontified t face font-lock-type-face) 909 916 (fontified t) 916 919 (fontified t face font-lock-type-face) 919 944 (fontified t) 944 946 (fontified t face font-lock-keyword-face) 946 969 (fontified t) 969 980 (fontified t face elixir-atom-face) 980 982 (fontified t) 982 983 (fontified t syntax-table (15) face font-lock-string-face) 983 984 (fontified t syntax-table (15) face font-lock-string-face) 984 990 (fontified t) 990 993 (fontified t face font-lock-keyword-face) 993 996 (fontified t) 996 999 (fontified t face font-lock-keyword-face)) . -207) (undo-tree-id0 . -999) (undo-tree-id1 . -292) (undo-tree-id2 . -994) (undo-tree-id3 . -994) (undo-tree-id4 . -986) (undo-tree-id5 . -986) (undo-tree-id6 . -947) (undo-tree-id7 . -947) (undo-tree-id8 . -886) (undo-tree-id9 . -886) (undo-tree-id10 . -885) (undo-tree-id11 . -885) (undo-tree-id12 . -850) (undo-tree-id13 . -850) (undo-tree-id14 . -813) (undo-tree-id15 . -813) (undo-tree-id16 . -812) (undo-tree-id17 . -812) (undo-tree-id18 . -292) (undo-tree-id19 . -292) (undo-tree-id20 . -372) (undo-tree-id21 . -372) (undo-tree-id22 . -419) (undo-tree-id23 . -419) (undo-tree-id24 . -427) (undo-tree-id25 . -427) (undo-tree-id26 . -433) (undo-tree-id27 . -433) (undo-tree-id28 . -434) (undo-tree-id29 . -434) (undo-tree-id30 . -469) (undo-tree-id31 . -469) (undo-tree-id32 . -504) (undo-tree-id33 . -504) (undo-tree-id34 . -552) (undo-tree-id35 . -552) (undo-tree-id36 . -558) (undo-tree-id37 . -558) (undo-tree-id38 . -559) (undo-tree-id39 . -559) (undo-tree-id40 . -625) (undo-tree-id41 . -625) (undo-tree-id42 . -660) (undo-tree-id43 . -660) (undo-tree-id44 . -661) (undo-tree-id45 . -661) (undo-tree-id46 . -748) (undo-tree-id47 . -748) (undo-tree-id48 . -798) (undo-tree-id49 . -798) (undo-tree-id50 . -806) (undo-tree-id51 . -806) (undo-tree-id52 . -994) (undo-tree-id53 . -999) (undo-tree-id54 . -994) (undo-tree-id55 . 3) (undo-tree-id56 . -999) 1206 (t 25417 27884 638368 362000)) nil (25417 28261 620954 860000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5918 . 5919) (nil fontified nil 207 . 5919) (207 . 5919)) nil (25417 28261 620867 746000) 0 nil])
([nil nil ((#("C" 0 1 (fontified t face font-lock-type-face)) . -611) (undo-tree-id72 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -612) (undo-tree-id73 . -1) (#("b" 0 1 (fontified t face font-lock-type-face)) . -613) (undo-tree-id74 . -1) (#("b" 0 1 (fontified t face font-lock-type-face)) . -614) (undo-tree-id75 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -615) (undo-tree-id76 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -616) (undo-tree-id77 . -1) 617 (t 25417 28261 632780 864000)) nil (25417 28300 115847 93000) 0 nil])
([nil nil ((611 . 625)) nil (25417 28300 115832 25000) 0 nil])
([nil nil ((#("C" 0 1 (fontified t face font-lock-type-face)) . -913) (undo-tree-id66 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -914) (undo-tree-id67 . -1) (#("b" 0 1 (fontified t face font-lock-type-face)) . -915) (undo-tree-id68 . -1) (#("b" 0 1 (fontified t face font-lock-type-face)) . -916) (undo-tree-id69 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -917) (undo-tree-id70 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -918) (undo-tree-id71 . -1) 919) nil (25417 28300 115827 657000) 0 nil])
([nil nil ((913 . 920)) nil (25417 28300 115811 65000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -913) (undo-tree-id59 . -1) (#("o" 0 1 (fontified t)) . -914) (undo-tree-id60 . -1) (#("l" 0 1 (fontified t)) . -915) (undo-tree-id61 . -1) (#("i" 0 1 (fontified t)) . -916) (undo-tree-id62 . -1) (#("a" 0 1 (fontified t)) . -917) (undo-tree-id63 . -1) (#("t" 0 1 (fontified t)) . -918) (undo-tree-id64 . -1) (#("h" 0 1 (fontified t)) . -919) (undo-tree-id65 . -1) 920) nil (25417 28300 115806 56000) 0 nil])
([nil nil ((913 . 926)) nil (25417 28300 115789 24000) 0 nil])
([nil nil ((921 . 922)) nil (25417 28300 115786 349000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face font-lock-type-face)) . -920) (undo-tree-id58 . -1) 921) nil (25417 28300 115783 714000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-type-face)) . -920) (undo-tree-id57 . -1) 921) nil (25417 28300 115777 51000) 0 nil])
([nil nil ((920 . 921)) nil (25417 28300 115759 909000) 0 nil])
([nil nil ((922 . 923)) nil (25417 28300 115751 774000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face elixir-atom-face)) . -240) (undo-tree-id78 . -1) (#("a" 0 1 (fontified t face elixir-atom-face)) . -241) (undo-tree-id79 . -1) (#("b" 0 1 (fontified t face elixir-atom-face)) . -242) (undo-tree-id80 . -1) (#("b" 0 1 (fontified t face elixir-atom-face)) . -243) (undo-tree-id81 . -1) (#("o" 0 1 (fontified t face elixir-atom-face)) . -244) (undo-tree-id82 . -1) (#("t" 0 1 (fontified t face elixir-atom-face)) . -245) (undo-tree-id83 . -1) 246 (t 25417 28300 112994 727000)) nil (25417 28327 516078 238000) 0 nil])
([nil nil ((240 . 255)) nil (25417 28327 516045 205000) 0 nil])
([nil nil ((#("Q" 0 1 (fontified t face font-lock-type-face)) . -651) (undo-tree-id86 . -1) (#("u" 0 1 (fontified t face font-lock-type-face)) . -652) (undo-tree-id87 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -653) (undo-tree-id88 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -654) (undo-tree-id89 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -655) (undo-tree-id90 . -1) 656 (t 25417 28327 513144 297000)) nil (25417 31161 189999 985000) 0 nil])
([nil nil ((651 . 654)) nil (25417 31161 189983 214000) 0 nil])
([nil nil ((114 . 117)) nil (25417 31161 189981 270000) 0 nil])
([nil nil ((657 . 663)) nil (25417 31161 189979 56000) 0 nil])
([nil nil ((960 . 963)) nil (25417 31161 189976 722000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face font-lock-type-face)) . -961) (undo-tree-id84 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -962) (undo-tree-id85 . -1) 963) nil (25417 31161 189971 642000) 0 nil])
([nil nil ((961 . 964)) nil (25417 31161 189947 116000) 0 nil])
([nil nil ((#("C" 0 1 (fontified t face font-lock-type-face)) . -1066) (undo-tree-id92 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -1067) (undo-tree-id93 . -1) (#("b" 0 1 (fontified t face font-lock-type-face)) . -1068) (undo-tree-id94 . -1) (#("b" 0 1 (fontified t face font-lock-type-face)) . -1069) (undo-tree-id95 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -1070) (undo-tree-id96 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -1071) (undo-tree-id97 . -1) 1072 (t 25417 31161 192649 576000)) nil (25417 31182 602673 730000) 0 nil])
([nil nil ((1066 . 1080)) nil (25417 31182 602655 686000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face font-lock-type-face)) . -1075) (undo-tree-id91 . -1) 1076) nil (25417 31182 602649 925000) 0 nil])
([nil current ((1075 . 1076)) nil (25417 31182 602619 809000) 0 nil])
nil
