(undo-tree-save-format-version . 1)
"0f090b7bb65fb63ef779afe35b2e7c3d3397c2e3"
[nil nil nil nil (25417 28204 508195 817000) 0 nil]
([nil nil ((#("      " 0 6 (fontified nil)) . 1188) (1188 . 1194) (1188 . 1189) (t 25417 27884 646368 422000)) nil (25417 28204 508193 653000) 0 nil])
([nil nil ((#("  def render(\"index.json\", %{credits: credits}) do
    %{data: render_many(credits, CreditsView, \"credits.json\")}
  end

  def render(\"show.json\", %{credits: credits}) do
    %{data: render_one(credits, CreditsView, \"credits.json\")}
  end

  def render(\"credits.json\", %{credits: credits}) do
    %{
      id: credits.id,
      loan_code: credits.loan_code,
      plan_number: credits.plan_number,
      quota_sec: credits.quota_sec,
      start_date: credits.start_date,
      payment_date: credits.payment_date,
      due_date: credits.due_date,
      quota_delayed_days: credits.quota_delayed_days,
      quota_state: credits.quota_state,
      balance_sub_code: credits.balance_sub_code,
      delayed_quota_history_days: credits.delayed_quota_history_days,
      previous_quota_state: credits.previous_quota_state,
      previous_payment_date: credits.previous_payment_date,
      previous_state_sub_code: credits.previous_state_sub_code,
      prevision_amount: credits.prevision_amount,
      INTE_adjust: credits.INTE_adjust,
      bill_number: credits.bill_number,

      Cabbot.Creditos: credits.Cabbot.Creditos,
      ClientsQuota: credits.ClientsQuota,
      clients_quota: credits.clients_quota,
      loan_code: credits.loan_code,
      plan_number: credits.plan_number,
      quota_sec: credits.quota_sec,
      conpcept_code: credits.conpcept_code,
      user_code: credits.user_code,
      calc_number_days: credits.calc_number_days,
      quota_amount: credits.quota_amount,
      earned_amount: credits.earned_amount,
      paid_amount: credits.paid_amount,
      condoned_amount: credits.condoned_amount,
      payment_sec: credits.payment_sec,
      payment_date: credits.payment_date,
      concept_state: credits.concept_state,
      previous_paid_amount: credits.previous_paid_amount,
      previous_concept_state: credits.previous_concept_state,
      previous_payment_date: credits.previous_payment_date,
      previous_sec_payment: credits.previous_sec_payment,
      last_payment_penalty: credits.last_payment_penalty,
      previous_earned_amount: credits.previous_earned_amount,
      debt_balance: credits.debt_balance,
      office_code: credits.office_code
    }
  end" 0 2 (fontified t) 2 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 12 (fontified t face font-lock-function-name-face) 12 13 (fontified t) 13 14 (fontified t syntax-table (15) face font-lock-string-face) 14 24 (fontified t face font-lock-string-face) 24 25 (fontified t syntax-table (15) face font-lock-string-face) 25 29 (fontified t) 29 37 (fontified t face elixir-atom-face) 37 48 (fontified t) 48 50 (fontified t face font-lock-keyword-face) 50 57 (fontified t) 57 62 (fontified t face elixir-atom-face) 62 84 (fontified t) 84 95 (fontified t face font-lock-type-face) 95 97 (fontified t) 97 98 (fontified t syntax-table (15) face font-lock-string-face) 98 110 (fontified t face font-lock-string-face) 110 111 (fontified t syntax-table (15) face font-lock-string-face) 111 116 (fontified t) 116 119 (fontified t face font-lock-keyword-face) 119 123 (fontified t) 123 126 (fontified t face font-lock-keyword-face) 126 127 (fontified t) 127 133 (fontified t face font-lock-function-name-face) 133 134 (fontified t) 134 135 (fontified t syntax-table (15) face font-lock-string-face) 135 144 (fontified t face font-lock-string-face) 144 145 (fontified t syntax-table (15) face font-lock-string-face) 145 149 (fontified t) 149 157 (fontified t face elixir-atom-face) 157 168 (fontified t) 168 170 (fontified t face font-lock-keyword-face) 170 177 (fontified t) 177 182 (fontified t face elixir-atom-face) 182 203 (fontified t) 203 214 (fontified t face font-lock-type-face) 214 216 (fontified t) 216 217 (fontified t syntax-table (15) face font-lock-string-face) 217 229 (fontified t face font-lock-string-face) 229 230 (fontified t syntax-table (15) face font-lock-string-face) 230 235 (fontified t) 235 238 (fontified t face font-lock-keyword-face) 238 242 (fontified t) 242 245 (fontified t face font-lock-keyword-face) 245 246 (fontified t) 246 252 (fontified t face font-lock-function-name-face) 252 253 (fontified t) 253 254 (fontified t syntax-table (15) face font-lock-string-face) 254 266 (fontified t face font-lock-string-face) 266 267 (fontified t syntax-table (15) face font-lock-string-face) 267 271 (fontified t) 271 279 (fontified t face elixir-atom-face) 279 290 (fontified t) 290 292 (fontified t face font-lock-keyword-face) 292 306 (fontified t) 306 309 (fontified t face elixir-atom-face) 309 328 (fontified t) 328 338 (fontified t face elixir-atom-face) 338 364 (fontified t) 364 376 (fontified t face elixir-atom-face) 376 387 (fontified t) 387 398 (fontified t) 398 404 (fontified t) 404 414 (fontified t face elixir-atom-face) 414 440 (fontified t) 440 451 (fontified t face elixir-atom-face) 451 478 (fontified t) 478 491 (fontified t face elixir-atom-face) 491 520 (fontified t) 520 529 (fontified t face elixir-atom-face) 529 554 (fontified t) 554 573 (fontified t face elixir-atom-face) 573 608 (fontified t) 608 620 (fontified t face elixir-atom-face) 620 648 (fontified t) 648 665 (fontified t face elixir-atom-face) 665 698 (fontified t) 698 725 (fontified t face elixir-atom-face) 725 768 (fontified t) 768 789 (fontified t face elixir-atom-face) 789 826 (fontified t) 826 848 (fontified t face elixir-atom-face) 848 886 (fontified t) 886 898 (fontified t face elixir-atom-face) 898 910 (fontified t face elixir-atom-face) 910 944 (fontified t) 944 950 (fontified t) 950 967 (fontified t face elixir-atom-face) 967 1000 (fontified t) 1000 1012 (fontified t face elixir-atom-face) 1012 1021 (fontified t) 1021 1032 (fontified t face font-lock-type-face) 1032 1040 (fontified t) 1040 1052 (fontified t face elixir-atom-face) 1052 1074 (fontified t) 1074 1075 (fontified t) 1075 1081 (fontified t) 1081 1087 (fontified t face font-lock-type-face) 1087 1088 (fontified t) 1088 1097 (fontified t face elixir-atom-face) 1097 1106 (fontified t) 1106 1121 (fontified t face font-lock-type-face) 1121 1122 (fontified t) 1122 1123 (fontified t) 1123 1129 (fontified t) 1129 1142 (fontified t face elixir-atom-face) 1142 1151 (fontified t) 1151 1163 (fontified t face font-lock-type-face) 1163 1171 (fontified t) 1171 1185 (fontified t face elixir-atom-face) 1185 1215 (fontified t) 1215 1225 (fontified t face elixir-atom-face) 1225 1251 (fontified t) 1251 1263 (fontified t face elixir-atom-face) 1263 1291 (fontified t) 1291 1301 (fontified t face elixir-atom-face) 1301 1327 (fontified t) 1327 1341 (fontified t face elixir-atom-face) 1341 1371 (fontified t) 1371 1381 (fontified t face elixir-atom-face) 1381 1407 (fontified t) 1407 1424 (fontified t face elixir-atom-face) 1424 1445 (fontified t) 1445 1451 (fontified t) 1451 1457 (fontified t) 1457 1470 (fontified t face elixir-atom-face) 1470 1499 (fontified t) 1499 1513 (fontified t face elixir-atom-face) 1513 1543 (fontified t) 1543 1555 (fontified t face elixir-atom-face) 1555 1575 (fontified t) 1575 1577 (fontified t) 1577 1583 (fontified t) 1583 1599 (fontified t face elixir-atom-face) 1599 1631 (fontified t) 1631 1643 (fontified t face elixir-atom-face) 1643 1671 (fontified t) 1671 1684 (fontified t face elixir-atom-face) 1684 1713 (fontified t) 1713 1727 (fontified t face elixir-atom-face) 1727 1757 (fontified t) 1757 1778 (fontified t face elixir-atom-face) 1778 1815 (fontified t) 1815 1838 (fontified t face elixir-atom-face) 1838 1877 (fontified t) 1877 1899 (fontified t face elixir-atom-face) 1899 1937 (fontified t) 1937 1951 (fontified t face elixir-atom-face) 1951 1958 (fontified t face elixir-atom-face) 1958 1989 (fontified t) 1989 1995 (fontified t) 1995 2016 (fontified t face elixir-atom-face) 2016 2053 (fontified t) 2053 2076 (fontified t face elixir-atom-face) 2076 2077 (fontified t) 2077 2109 (fontified t) 2109 2115 (fontified t) 2115 2128 (fontified t face elixir-atom-face) 2128 2157 (fontified t) 2157 2169 (fontified t face elixir-atom-face) 2169 2198 (fontified t) 2198 2201 (fontified t face font-lock-keyword-face)) . -114) (undo-tree-id0 . -2201) (undo-tree-id1 . -1209) (undo-tree-id2 . -2109) (undo-tree-id3 . -2109) (undo-tree-id4 . -2047) (undo-tree-id5 . -2047) (undo-tree-id6 . -1209) (undo-tree-id7 . -1209) (undo-tree-id8 . -1245) (undo-tree-id9 . -1245) (undo-tree-id10 . -1285) (undo-tree-id11 . -1285) (undo-tree-id12 . -1321) (undo-tree-id13 . -1321) (undo-tree-id14 . -1365) (undo-tree-id15 . -1365) (undo-tree-id16 . -1401) (undo-tree-id17 . -1401) (undo-tree-id18 . -1451) (undo-tree-id19 . -1451) (undo-tree-id20 . -1493) (undo-tree-id21 . -1493) (undo-tree-id22 . -1537) (undo-tree-id23 . -1537) (undo-tree-id24 . -1577) (undo-tree-id25 . -1577) (undo-tree-id26 . -1625) (undo-tree-id27 . -1625) (undo-tree-id28 . -1665) (undo-tree-id29 . -1665) (undo-tree-id30 . -1707) (undo-tree-id31 . -1707) (undo-tree-id32 . -1751) (undo-tree-id33 . -1751) (undo-tree-id34 . -1809) (undo-tree-id35 . -1809) (undo-tree-id36 . -1989) (undo-tree-id37 . -1989) (undo-tree-id38 . -2196) (undo-tree-id39 . -2196) (undo-tree-id40 . -2190) (undo-tree-id41 . -2190) (undo-tree-id42 . -2151) (undo-tree-id43 . -2151) (undo-tree-id44 . -1931) (undo-tree-id45 . -1931) (undo-tree-id46 . -1871) (undo-tree-id47 . -1871) (undo-tree-id48 . -2196) (undo-tree-id49 . -2201) (undo-tree-id50 . 3) (undo-tree-id51 . -2201) (undo-tree-id52 . -2196) 2315) nil (25417 28204 508186 499000) 0 nil])
([nil nil ((114 . 116) (#("  " 0 2 (fontified nil)) . 113) (113 . 115) (113 . 114)) nil (25417 28204 508114 955000) 0 nil])
([nil nil ((nil rear-nonsticky nil 477 . 478) (nil fontified nil 116 . 478) (116 . 478)) nil (25417 28204 508108 342000) 0 nil])
([nil nil ((#("C" 0 1 (fontified t face font-lock-type-face)) . -250) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -251) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("b" 0 1 (fontified t face font-lock-type-face)) . -252) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#("b" 0 1 (fontified t face font-lock-type-face)) . -253) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -254) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -255) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#("." 0 1 (fontified t)) . -256) (undo-tree-id92 . -1) (#("C" 0 1 (fontified t face font-lock-type-face)) . -257) (undo-tree-id93 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -258) (undo-tree-id94 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -259) (undo-tree-id95 . -1) (#("d" 0 1 (fontified t face font-lock-type-face)) . -260) (undo-tree-id96 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -261) (undo-tree-id97 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -262) (undo-tree-id98 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -263) (undo-tree-id99 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -264) (undo-tree-id100 . -1) (#("." 0 1 (fontified t)) . -265) (undo-tree-id101 . -1) (#("Q" 0 1 (fontified t face font-lock-type-face)) . -266) (undo-tree-id102 . -1) (#("u" 0 1 (fontified t face font-lock-type-face)) . -267) (undo-tree-id103 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -268) (undo-tree-id104 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -269) (undo-tree-id105 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -270) (undo-tree-id106 . -1) 271 (t 25417 28204 508454 552000)) nil (25417 31275 468368 908000) 0 nil])
([nil nil ((#("C" 0 1 (fontified t face font-lock-type-face)) . -243) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -244) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("b" 0 1 (fontified t face font-lock-type-face)) . -245) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("b" 0 1 (fontified t face font-lock-type-face)) . -246) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -247) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -248) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("." 0 1 (fontified t)) . -249) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) 250) nil (25417 31275 468300 439000) 0 nil])
([nil current ((nil rear-nonsticky nil 266 . 267) (nil fontified nil 243 . 267) (243 . 267)) nil (25417 31275 468245 907000) 0 nil])
nil
